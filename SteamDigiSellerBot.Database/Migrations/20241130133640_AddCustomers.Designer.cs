// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SteamDigiSellerBot.Database.Contexts;
using SteamDigiSellerBot.Database.Entities;
using SteamKit2.Internal;

namespace SteamDigiSellerBot.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241130133640_AddCustomers")]
    partial class AddCustomers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActivationCountry")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int?>("BotRegionSettingId")
                        .HasColumnType("integer");

                    b.Property<int>("GameSendLimitAddParam")
                        .HasColumnType("integer");

                    b.Property<bool>("HasProblemPurchase")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsON")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProblemRegion")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastTimeBalanceUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastTimeUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LoginResult")
                        .HasColumnType("integer");

                    b.Property<string>("MaFileStr")
                        .HasColumnType("text");

                    b.Property<string>("MaFileStrC")
                        .HasColumnType("text");

                    b.Property<decimal>("MaxSendedGiftsSum")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("MaxSendedGiftsUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PasswordC")
                        .HasColumnType("text");

                    b.Property<string>("PersonName")
                        .HasColumnType("text");

                    b.Property<string>("ProxyStr")
                        .HasColumnType("text");

                    b.Property<string>("ProxyStrC")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<List<DateTimeOffset>>("SendGameAttemptsArray")
                        .HasColumnType("json");

                    b.Property<List<DateTimeOffset>>("SendGameAttemptsArrayDaily")
                        .HasColumnType("json");

                    b.Property<int>("SendGameAttemptsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SendGameAttemptsCountDaily")
                        .HasColumnType("integer");

                    b.Property<decimal>("SendedGiftsSum")
                        .HasColumnType("numeric");

                    b.Property<int?>("State")
                        .HasColumnType("integer");

                    b.Property<string>("SteamCookiesStr")
                        .HasColumnType("text");

                    b.Property<string>("SteamCookiesStrC")
                        .HasColumnType("text");

                    b.Property<int?>("SteamCurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("SteamId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TempLimitDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalPurchaseSumUSD")
                        .HasColumnType("numeric");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<IEnumerable<VacGame>>("VacGames")
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("BotRegionSettingId");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.BotRegionSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GiftSendSteamCurrencyId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PreviousPurchasesCNY")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PreviousPurchasesJPY")
                        .HasColumnType("numeric");

                    b.Property<int?>("PreviousPurchasesSteamCurrencyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BotRegionSettings");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.BotSendGameAttempts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BotId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.ToTable("BotSendGameAttempts");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<int?>("CurrencyDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("SteamId")
                        .HasColumnType("integer");

                    b.Property<string>("SteamSymbol")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyDataId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.CurrencyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CurrencyData");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AppId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DiscountEndTimeUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DiscountEndTime");

                    b.Property<StoreItem>("GameInfo")
                        .HasColumnType("json");

                    b.Property<bool>("IsBundle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDlc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPriceParseError")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SteamCurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("SubId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GamePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("CurrentSteamPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("FailUsingCount")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsManualSet")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("OriginalSteamPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("SteamCurrencyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameId", "SteamCurrencyId" }, "gameprices_un")
                        .IsUnique();

                    b.ToTable("GamePrices");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("ActivationEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("AddedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("AutoSendInvitationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("BlockOrder")
                        .HasColumnType("boolean");

                    b.Property<int?>("BotId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("BotSwitchList")
                        .HasColumnType("json");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("DaysExpiration")
                        .HasColumnType("integer");

                    b.Property<string>("DigiSellerDealId")
                        .HasColumnType("text");

                    b.Property<decimal?>("DigiSellerDealPriceUsd")
                        .HasColumnType("numeric");

                    b.Property<int>("GameExistsRepeatSendCount")
                        .HasColumnType("integer");

                    b.Property<int?>("GameSessionItemId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSteamMonitoring")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxSellPercent")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PriorityPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("QueuePosition")
                        .HasColumnType("integer");

                    b.Property<int>("QueueWaitingMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SteamContactType")
                        .HasColumnType("integer");

                    b.Property<string>("SteamContactValue")
                        .HasColumnType("text");

                    b.Property<int?>("SteamCountryCodeId")
                        .HasColumnType("integer");

                    b.Property<string>("SteamProfileAvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("SteamProfileGifteeAccountID")
                        .HasColumnType("text");

                    b.Property<string>("SteamProfileName")
                        .HasColumnType("text");

                    b.Property<string>("SteamProfileUrl")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.HasIndex("GameSessionItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SteamCountryCodeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "UniqueCode" }, "gamesessions_un")
                        .IsUnique();

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GameSessionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SteamPercent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("GameSessionItems");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GameSessionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GameSessionStatus");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GameSessionStatusLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GameSessionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<GameSessionStatusLog.ValueJson>("Value")
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.ToTable("GameSessionStatusLogs");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.SteamCountryCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("SteamCountryCodes");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.SteamProxy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PasswordC")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SteamProxies");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.MarketPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MarketPlaces");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagPromoReplacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarketPlaceId");

                    b.ToTable("TagPromoReplacements");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagPromoReplacementValue", b =>
                {
                    b.Property<int>("TagPromoReplacementId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("TagPromoReplacementId", "LanguageCode");

                    b.ToTable("TagPromoReplacementValues");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagTypeReplacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsDlc")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TagTypeReplacements");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagTypeReplacementValue", b =>
                {
                    b.Property<int>("TagTypeReplacementId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("TagTypeReplacementId", "LanguageCode");

                    b.ToTable("TagTypeReplacementValues");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.ItemAdditionalInfoTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("ItemAdditionalInfoTemplates");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.ItemAdditionalInfoTemplateValue", b =>
                {
                    b.Property<int>("ItemAdditionalInfoTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("ItemAdditionalInfoTemplateId", "LanguageCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("ItemAdditionalInfoTemplateValues");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.ItemInfoTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("ItemInfoTemplates");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.ItemInfoTemplateValue", b =>
                {
                    b.Property<int>("ItemInfoTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("ItemInfoTemplateId", "LanguageCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("ItemInfoTemplateValues");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.UserDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("text");

                    b.Property<string>("DigisellerApiKey")
                        .HasColumnType("text");

                    b.Property<string>("DigisellerApiKeyC")
                        .HasColumnType("text");

                    b.Property<string>("DigisellerID")
                        .HasColumnType("text");

                    b.Property<string>("DigisellerIDC")
                        .HasColumnType("text");

                    b.Property<string>("DigisellerToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DigisellerTokenExp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.VacGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SubId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VacGames");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DigisellerApiKey")
                        .HasColumnType("text");

                    b.Property<string>("DigisellerApiKeyC")
                        .HasColumnType("text");

                    b.Property<string>("DigisellerID")
                        .HasColumnType("text");

                    b.Property<string>("DigisellerIDC")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Item", b =>
                {
                    b.HasBaseType("SteamDigiSellerBot.Database.Entities.Game");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<decimal>("AddPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CurrentDigiSellerPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("CurrentDigiSellerPriceNeedAttention")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("DigiSellerIds")
                        .HasColumnType("text[]");

                    b.Property<decimal?>("FixedDigiSellerPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsAutoActivation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFixedPrice")
                        .HasColumnType("boolean");

                    b.Property<int?>("LastSendedRegionId")
                        .HasColumnType("integer");

                    b.Property<int?>("MinActualThreshold")
                        .HasColumnType("integer");

                    b.Property<int?>("SteamCountryCodeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SteamPercent")
                        .HasColumnType("numeric");

                    b.HasIndex("LastSendedRegionId");

                    b.HasIndex("SteamCountryCodeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Customer", b =>
                {
                    b.HasBaseType("SteamDigiSellerBot.Database.Entities.UserDB");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("BonusBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LastSteamRegion")
                        .HasColumnType("text");

                    b.Property<string>("Passsword")
                        .HasColumnType("text");

                    b.Property<decimal>("RubbleBalance")
                        .HasColumnType("numeric");

                    b.Property<int[]>("SteamGamesWishList")
                        .HasColumnType("integer[]");

                    b.Property<string>("SteamId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SynchronizationDateSteamApi")
                        .HasColumnType("timestamp without time zone");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Seller", b =>
                {
                    b.HasBaseType("SteamDigiSellerBot.Database.Entities.UserDB");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemsLimit")
                        .HasColumnType("integer");

                    b.Property<int?>("RentDays")
                        .HasColumnType("integer");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamDigiSellerBot.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Bot", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.BotRegionSetting", "BotRegionSetting")
                        .WithMany()
                        .HasForeignKey("BotRegionSettingId");

                    b.Navigation("BotRegionSetting");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.BotSendGameAttempts", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.Bot", null)
                        .WithMany("SendGameAttempts")
                        .HasForeignKey("BotId");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Currency", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.CurrencyData", null)
                        .WithMany("Currencies")
                        .HasForeignKey("CurrencyDataId");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GamePrice", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.Game", "Game")
                        .WithMany("GamePrices")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GameSession", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.Bot", "Bot")
                        .WithMany()
                        .HasForeignKey("BotId");

                    b.HasOne("SteamDigiSellerBot.Database.Entities.GameSessionItem", "ItemData")
                        .WithMany()
                        .HasForeignKey("GameSessionItemId");

                    b.HasOne("SteamDigiSellerBot.Database.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("SteamDigiSellerBot.Database.Entities.SteamCountryCode", "SendRegion")
                        .WithMany()
                        .HasForeignKey("SteamCountryCodeId");

                    b.HasOne("SteamDigiSellerBot.Database.Entities.UserDB", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");

                    b.Navigation("Item");

                    b.Navigation("ItemData");

                    b.Navigation("SendRegion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GameSessionStatusLog", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.GameSession", null)
                        .WithMany("GameSessionStatusLogs")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagPromoReplacement", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.TagReplacements.MarketPlace", "MarketPlace")
                        .WithMany("TagPromoReplacements")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketPlace");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagPromoReplacementValue", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.TagReplacements.TagPromoReplacement", "TagPromoReplacement")
                        .WithMany("TagPromoReplacementValues")
                        .HasForeignKey("TagPromoReplacementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagPromoReplacement");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagTypeReplacementValue", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.TagReplacements.TagTypeReplacement", "TagTypeReplacement")
                        .WithMany("TagTypeReplacementValues")
                        .HasForeignKey("TagTypeReplacementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagTypeReplacement");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.ItemAdditionalInfoTemplateValue", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.Templates.ItemAdditionalInfoTemplate", "ItemAdditionalInfoTemplate")
                        .WithMany()
                        .HasForeignKey("ItemAdditionalInfoTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamDigiSellerBot.Database.Entities.Templates.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemAdditionalInfoTemplate");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.ItemInfoTemplateValue", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.Templates.ItemInfoTemplate", "ItemInfoTemplate")
                        .WithMany("ItemInfoTemplateValues")
                        .HasForeignKey("ItemInfoTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamDigiSellerBot.Database.Entities.Templates.Language", "Language")
                        .WithMany("ItemInfoTemplateValues")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemInfoTemplate");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.UserDB", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Models.User", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("AspNetUserId");

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Item", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.Game", null)
                        .WithOne()
                        .HasForeignKey("SteamDigiSellerBot.Database.Entities.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamDigiSellerBot.Database.Entities.SteamCountryCode", "LastSendedRegion")
                        .WithMany()
                        .HasForeignKey("LastSendedRegionId");

                    b.HasOne("SteamDigiSellerBot.Database.Entities.SteamCountryCode", "Region")
                        .WithMany()
                        .HasForeignKey("SteamCountryCodeId");

                    b.Navigation("LastSendedRegion");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Customer", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.UserDB", null)
                        .WithOne()
                        .HasForeignKey("SteamDigiSellerBot.Database.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Seller", b =>
                {
                    b.HasOne("SteamDigiSellerBot.Database.Entities.UserDB", null)
                        .WithOne()
                        .HasForeignKey("SteamDigiSellerBot.Database.Entities.Seller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SteamDigiSellerBot.Database.Entities.SellerPermissions", "Permissions", b1 =>
                        {
                            b1.Property<int>("SellerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<bool>("BotsLimitsParsing")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DigisellerItems")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DigisellerItemsGeneration")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DirectBotsDeposit")
                                .HasColumnType("boolean");

                            b1.Property<bool>("FuryPayItems")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ItemsHierarchy")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ItemsMultiregion")
                                .HasColumnType("boolean");

                            b1.Property<bool>("KFGItems")
                                .HasColumnType("boolean");

                            b1.Property<bool>("OneTimeBots")
                                .HasColumnType("boolean");

                            b1.Property<bool>("OrderSessionCreation")
                                .HasColumnType("boolean");

                            b1.HasKey("SellerId");

                            b1.ToTable("Sellers");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Bot", b =>
                {
                    b.Navigation("SendGameAttempts");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.CurrencyData", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Game", b =>
                {
                    b.Navigation("GamePrices");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.GameSession", b =>
                {
                    b.Navigation("GameSessionStatusLogs");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.MarketPlace", b =>
                {
                    b.Navigation("TagPromoReplacements");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagPromoReplacement", b =>
                {
                    b.Navigation("TagPromoReplacementValues");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.TagReplacements.TagTypeReplacement", b =>
                {
                    b.Navigation("TagTypeReplacementValues");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.ItemInfoTemplate", b =>
                {
                    b.Navigation("ItemInfoTemplateValues");
                });

            modelBuilder.Entity("SteamDigiSellerBot.Database.Entities.Templates.Language", b =>
                {
                    b.Navigation("ItemInfoTemplateValues");
                });
#pragma warning restore 612, 618
        }
    }
}
