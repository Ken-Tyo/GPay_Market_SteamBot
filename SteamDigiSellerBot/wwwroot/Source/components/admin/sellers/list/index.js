import React, { useState, useEffect } from 'react';
import PageHeader from '../../pageHeader';
import EditSellerModal from '../modalEdit';
import ModalRulesEdit from '../modalEdit/modalRulesEdit';
import css from './styles.scss';

const SellersList = (user) => {
  const [isLoading, setIsLoading] = useState(true)
  const [data, setData] = useState([])
  const [currentItem, setCurrentItem] = useState(null)
  const [currentItemRules, setCurrentItemRules] = useState(null)

  const renderUserCards = () => {
    return data.map(item => renderUserCard(item));
  }  

  const apiGetSellers = async () => {
    const headers = new Headers();
    headers.append("Content-Type", "application/json");

    const options = {
      method: "GET",
      headers: headers
    }

    let res = await fetch(`/sellers/`, options);

    if (res.ok) {
      const json = await res.json();

      return json;
    }

    return null;
  };

  const update = async (dto) => {
    const headers = new Headers();
    headers.append("Content-Type", "application/json");
    headers.append("Content-Length", JSON.stringify(dto).length);

    const options = {
      method: "PUT",
      headers: headers,
      body: JSON.stringify(dto)
    }

    let res = await fetch(`/sellers/`, options);

    if (res.ok) {
      const json = await res.json();

      return json;
    }

    return null;
  };

  const blockItem = (item) => {
    item.blocked = true;
    update(item).then(result => {
      if (result && result.hasError == false) {
        setData(data.map((v, i) => v.id == item.id ? item : v))
      }
    })
  }

  useEffect(() => {
    apiGetSellers().then(data => {
      if (data.sellers && data.sellers.length > 0) {
        setData(data.sellers);
      }
    })
  }, [currentItem, user])


  const getStateColor = (item) => {
    if (item.blocked) {
      return css.blocked 
    }

    if (item.rentDays < 5 && item.rentDays != undefined && item.rentDays != null) {
      return css.expired
    }

    return css.active
  }

  const getStateText = (item) => {
    if (item.blocked) {
      return '• заблокирован'
    }

    if (item.rentDays < 5 && item.rentDays != undefined && item.rentDays != null) {
      return '• кончилась аренда'
    }

    return '• активен'
  }

  const getRentClassName = (item) => {
    if (!item) {
      return '';
    }

    if (item.rentDays <= 5) {
      return css.rentExpired
    }

    return '';
  }

  const renderUserCard = (item) => {
    return (
      <div className={css.userCard}>
        <div className={css.info}>
          <div className={css.infoItem}>
            <div className={css.login}>{item.login}</div>
            <div className={`${css.sellerState} ${getStateColor(item)}`}>{getStateText(item)}</div>
          </div>
          <div className={css.infoItem}>Осталось аренды:&nbsp;<span className={getRentClassName(item)}>{item.rentDays}</span>&nbsp;дн.</div>
          <div className={css.infoItem}>Товаров: xxx/{item.itemsLimit}</div>
          <div className={css.infoItem}>Продаж: xxx/xxx/xxx</div>
          <div className={css.infoItem}>Баланс: xxx RUB xxx USD</div>
        </div>
        <div className={css.buttons}>
          <div>
            <div className={css.edit} onClick={() => setCurrentItem(item)}>
              <svg width="23" height="24" viewBox="0 0 23 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M14.8943 7.71084L4.40417 18.2103C4.09965 18.5149 4.09965 19.0106 4.40417 19.3152C4.55416 19.4653 4.75415 19.5426 4.95413 19.5426C5.15412 19.5426 5.3541 19.4653 5.50409 19.3152L15.9942 8.82035C16.2987 8.51569 16.2987 8.02005 15.9942 7.71539C15.6942 7.40618 15.1988 7.40618 14.8943 7.71084Z" fill="white" />
                <path d="M20.2395 9.50713C20.4395 9.50713 20.6395 9.42983 20.7895 9.27977L21.9349 8.13388C23.2575 6.81065 23.2575 4.65984 21.9349 3.34116L20.3713 1.77693C19.7305 1.13578 18.8805 0.785645 17.9761 0.785645C17.0716 0.785645 16.2217 1.14032 15.5808 1.77693L14.4354 2.92282C14.1309 3.22748 14.1309 3.72312 14.4354 4.02778L19.6896 9.28432C19.8396 9.42983 20.0396 9.50713 20.2395 9.50713ZM16.6853 2.8728C17.0307 2.52721 17.4897 2.33623 17.9806 2.33623C18.4669 2.33623 18.9305 2.52721 19.276 2.8728L20.8395 4.43703C21.5531 5.15093 21.5531 6.31046 20.8395 7.02437L20.2395 7.6246L16.0853 3.46848L16.6853 2.8728Z" fill="white" />
                <path d="M8.04423 22.0255L19.1116 10.9531C19.4161 10.6484 19.4161 10.1528 19.1116 9.84812C18.8071 9.54346 18.3116 9.54346 18.0071 9.84812L7.13066 20.7386L2.33102 21.3843L2.97642 16.5825L13.3666 6.18765C13.6711 5.88299 13.6711 5.38734 13.3666 5.08268C13.062 4.77802 12.5666 4.77802 12.2621 5.08268L1.69015 15.6685C1.56744 15.7913 1.49017 15.9459 1.46744 16.1141L0.649323 22.1892C0.617507 22.4302 0.699319 22.6712 0.872034 22.844C1.01748 22.9895 1.21746 23.0713 1.42199 23.0713C1.45835 23.0713 1.49017 23.0668 1.52653 23.0622L7.59881 22.2437C7.76698 22.2255 7.92605 22.1482 8.04423 22.0255Z" fill="white" />
              </svg>
            </div>
            <div className={css.edit} onClick={() => blockItem(item)}>
              <svg width="19" height="18" viewBox="0 0 19 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.518 17.5928H2.0748C1.20518 17.5928 0.5 16.8876 0.5 16.018V1.5748C0.5 0.705176 1.20518 0 2.0748 0H16.518C17.3876 0 18.0928 0.705176 18.0928 1.5748V16.018C18.0928 16.8876 17.3876 17.5928 16.518 17.5928Z" fill="white" />
              </svg>
            </div>
          </div>
          <div>
            <div>
              <svg className={css.edit} width="23" height="22" viewBox="0 0 23 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M5.3 0.214355H17.7C20.6 0.214355 23 2.67364 23 5.64527V10.0515C23 13.0231 20.6 15.4824 17.7 15.4824H12.35L7.15 20.8108C7.1 20.8108 6.65 21.3744 6.05 21.1695C5.65 21.067 5.4 20.7084 5.4 20.2985V15.4824C2.4 15.4824 0 13.1256 0 10.0515V5.64527C0 2.67364 2.4 0.214355 5.3 0.214355ZM5.05 11.4861C4.75 11.4861 4.55 11.2811 4.55 10.9737C4.55 10.6663 4.75 10.4614 5.05 10.4614H12.2C12.5 10.4614 12.7 10.6663 12.7 10.9737C12.7 11.2811 12.5 11.4861 12.2 11.4861H5.05ZM5.05 8.56567C4.75 8.56567 4.55 8.30949 4.55 8.05332C4.55 7.74591 4.75 7.54097 5.05 7.54097H17.95C18.25 7.54097 18.45 7.74591 18.45 8.05332C18.45 8.30949 18.25 8.56567 17.95 8.56567H5.05ZM5.05 5.59404C4.75 5.59404 4.55 5.38909 4.55 5.08168C4.55 4.77427 4.75 4.56933 5.05 4.56933H15.4C15.65 4.56933 15.9 4.77427 15.9 5.08168C15.9 5.38909 15.65 5.59404 15.4 5.59404H5.05ZM17.7 1.64894H5.3C3.15 1.64894 1.4 3.44216 1.4 5.64527V10.0515C1.4 12.2546 3.15 14.0478 5.3 14.0478H5.55C6.2 14.0478 6.8 14.6626 6.8 15.3287V19.1201L11.75 14.0478H17.7C19.85 14.0478 21.6 12.2546 21.6 10.0515V5.64527C21.6 3.44216 19.85 1.64894 17.7 1.64894Z" fill="white" />
              </svg>
            </div>
            <div className={css.edit} onClick={() => setCurrentItemRules(item)}>
              <svg width="24" height="23" viewBox="0 0 24 23" fill="none" xmlns="http://www.w3.org/2000/svg">
                <mask id="path-1-inside-1_4576_677" fill="white">
                  <path d="M23.9935 8.99761C24.0051 8.91925 24.0011 8.83937 23.9818 8.76256C23.9626 8.68574 23.9284 8.61349 23.8812 8.54996C23.8341 8.48643 23.7749 8.43286 23.707 8.39232C23.6392 8.35179 23.5641 8.32508 23.486 8.31373L15.9213 7.20724L12.5374 0.308228C12.4823 0.214358 12.4037 0.136549 12.3094 0.0824915C12.2151 0.0284341 12.1084 0 11.9998 0C11.8913 0 11.7845 0.0284341 11.6903 0.0824915C11.596 0.136549 11.5174 0.214358 11.4623 0.308228L8.07835 7.20724L0.513736 8.31494C0.403066 8.33107 0.299091 8.37791 0.213545 8.45018C0.127999 8.52246 0.0642855 8.61728 0.0295958 8.72395C-0.00509403 8.83063 -0.00938001 8.94491 0.0172216 9.05389C0.0438232 9.16288 0.100254 9.26224 0.180145 9.34076L5.65561 14.7107L4.36324 22.296C4.34425 22.4068 4.35656 22.5207 4.39878 22.6248C4.44099 22.7289 4.51142 22.8191 4.60209 22.8852C4.69276 22.9512 4.80005 22.9905 4.9118 22.9985C5.02356 23.0065 5.13531 22.9829 5.23442 22.9305L11.9998 19.351L18.7653 22.9305C18.8819 22.9912 19.0149 23.0123 19.1445 22.9907C19.3014 22.9642 19.4413 22.8762 19.5336 22.7462C19.6258 22.6161 19.6628 22.4546 19.6365 22.2972L18.3441 14.7119L23.8195 9.34076C23.9134 9.24857 23.9745 9.12802 23.9935 8.99761ZM17.2797 14.0713C17.2104 14.1396 17.1586 14.2236 17.1287 14.3163C17.0988 14.4089 17.0918 14.5075 17.1081 14.6035L18.2481 21.2954L12.2794 18.1373C12.1931 18.0923 12.0972 18.0689 11.9998 18.0689C11.9025 18.0689 11.8066 18.0923 11.7203 18.1373L5.7516 21.2954L6.89158 14.6035C6.90792 14.5075 6.90085 14.4089 6.87097 14.3163C6.84108 14.2236 6.78928 14.1396 6.71998 14.0713L1.8865 9.33113L8.56433 8.35587C8.66064 8.34147 8.75202 8.30381 8.83061 8.24614C8.90921 8.18846 8.97266 8.1125 9.01552 8.02477L11.9998 1.93847L14.9842 8.02357C15.0271 8.11113 15.0906 8.18691 15.1692 8.24438C15.2478 8.30185 15.3391 8.33929 15.4354 8.35347L22.1132 9.32992L17.2797 14.0713Z" />
                </mask>
                <path d="M23.9935 8.99761C24.0051 8.91925 24.0011 8.83937 23.9818 8.76256C23.9626 8.68574 23.9284 8.61349 23.8812 8.54996C23.8341 8.48643 23.7749 8.43286 23.707 8.39232C23.6392 8.35179 23.5641 8.32508 23.486 8.31373L15.9213 7.20724L12.5374 0.308228C12.4823 0.214358 12.4037 0.136549 12.3094 0.0824915C12.2151 0.0284341 12.1084 0 11.9998 0C11.8913 0 11.7845 0.0284341 11.6903 0.0824915C11.596 0.136549 11.5174 0.214358 11.4623 0.308228L8.07835 7.20724L0.513736 8.31494C0.403066 8.33107 0.299091 8.37791 0.213545 8.45018C0.127999 8.52246 0.0642855 8.61728 0.0295958 8.72395C-0.00509403 8.83063 -0.00938001 8.94491 0.0172216 9.05389C0.0438232 9.16288 0.100254 9.26224 0.180145 9.34076L5.65561 14.7107L4.36324 22.296C4.34425 22.4068 4.35656 22.5207 4.39878 22.6248C4.44099 22.7289 4.51142 22.8191 4.60209 22.8852C4.69276 22.9512 4.80005 22.9905 4.9118 22.9985C5.02356 23.0065 5.13531 22.9829 5.23442 22.9305L11.9998 19.351L18.7653 22.9305C18.8819 22.9912 19.0149 23.0123 19.1445 22.9907C19.3014 22.9642 19.4413 22.8762 19.5336 22.7462C19.6258 22.6161 19.6628 22.4546 19.6365 22.2972L18.3441 14.7119L23.8195 9.34076C23.9134 9.24857 23.9745 9.12802 23.9935 8.99761ZM17.2797 14.0713C17.2104 14.1396 17.1586 14.2236 17.1287 14.3163C17.0988 14.4089 17.0918 14.5075 17.1081 14.6035L18.2481 21.2954L12.2794 18.1373C12.1931 18.0923 12.0972 18.0689 11.9998 18.0689C11.9025 18.0689 11.8066 18.0923 11.7203 18.1373L5.7516 21.2954L6.89158 14.6035C6.90792 14.5075 6.90085 14.4089 6.87097 14.3163C6.84108 14.2236 6.78928 14.1396 6.71998 14.0713L1.8865 9.33113L8.56433 8.35587C8.66064 8.34147 8.75202 8.30381 8.83061 8.24614C8.90921 8.18846 8.97266 8.1125 9.01552 8.02477L11.9998 1.93847L14.9842 8.02357C15.0271 8.11113 15.0906 8.18691 15.1692 8.24438C15.2478 8.30185 15.3391 8.33929 15.4354 8.35347L22.1132 9.32992L17.2797 14.0713Z" fill="white" />
                <path d="M23.9935 8.99761L22.0149 8.70595L22.0144 8.70927L23.9935 8.99761ZM23.486 8.31373L23.1965 10.2927L23.1985 10.293L23.486 8.31373ZM15.9213 7.20724L14.1257 8.08799L14.5896 9.03373L15.6319 9.18618L15.9213 7.20724ZM12.5374 0.308228L14.3331 -0.572515L14.3 -0.639901L14.262 -0.70462L12.5374 0.308228ZM11.9998 0L11.9998 -2L11.9998 0ZM11.4623 0.308228L9.73769 -0.70462L9.69968 -0.639901L9.66663 -0.572515L11.4623 0.308228ZM8.07835 7.20724L8.36812 9.18614L9.41019 9.03355L9.87398 8.08799L8.07835 7.20724ZM0.513736 8.31494L0.802189 10.294L0.803508 10.2938L0.513736 8.31494ZM0.180145 9.34076L-1.22176 10.7672L-1.22024 10.7687L0.180145 9.34076ZM5.65561 14.7107L7.62719 15.0466L7.80291 14.0153L7.05599 13.2828L5.65561 14.7107ZM4.36324 22.296L6.3345 22.6338L6.33483 22.6319L4.36324 22.296ZM5.23442 22.9305L4.29908 21.1627L4.29903 21.1627L5.23442 22.9305ZM11.9998 19.351L12.9352 17.5831L11.9998 17.0883L11.0645 17.5831L11.9998 19.351ZM18.7653 22.9305L17.8299 24.6983L17.8418 24.7045L18.7653 22.9305ZM19.1445 22.9907L19.4735 24.9634L19.4778 24.9627L19.1445 22.9907ZM19.6365 22.2972L21.6089 21.9665L21.608 21.9613L19.6365 22.2972ZM18.3441 14.7119L16.9435 13.2841L16.1968 14.0166L16.3725 15.0478L18.3441 14.7119ZM23.8195 9.34076L25.2201 10.7685L25.2209 10.7677L23.8195 9.34076ZM17.2797 14.0713L15.8792 12.6436L15.8767 12.646L17.2797 14.0713ZM17.1081 14.6035L15.1365 14.9392L15.1365 14.9394L17.1081 14.6035ZM18.2481 21.2954L17.3127 23.0632L20.9015 24.9621L20.2197 20.9596L18.2481 21.2954ZM12.2794 18.1373L13.2148 16.3695L13.2028 16.3632L12.2794 18.1373ZM11.7203 18.1373L10.7968 16.3632L10.7849 16.3695L11.7203 18.1373ZM5.7516 21.2954L3.78001 20.9596L3.09817 24.9621L6.68698 23.0632L5.7516 21.2954ZM6.89158 14.6035L8.86317 14.9394L8.86321 14.9392L6.89158 14.6035ZM6.71998 14.0713L8.12297 12.646L8.12035 12.6434L6.71998 14.0713ZM1.8865 9.33113L1.59748 7.35212L-2.3935 7.93498L0.486131 10.7591L1.8865 9.33113ZM8.56433 8.35587L8.85336 10.3349L8.86013 10.3339L8.56433 8.35587ZM9.01552 8.02477L7.21978 7.14425L7.21853 7.14681L9.01552 8.02477ZM11.9998 1.93847L13.7955 1.05781L11.9997 -2.60397L10.2041 1.05795L11.9998 1.93847ZM14.9842 8.02357L16.78 7.14319L16.7798 7.14291L14.9842 8.02357ZM15.4354 8.35347L15.1438 10.3321L15.146 10.3324L15.4354 8.35347ZM22.1132 9.32992L23.5137 10.7577L26.3919 7.93431L22.4026 7.35097L22.1132 9.32992ZM25.9722 9.28928C26.022 8.95144 26.0048 8.60707 25.9217 8.27581L22.042 9.2493C21.9974 9.07168 21.9882 8.88707 22.0149 8.70595L25.9722 9.28928ZM25.9217 8.27581C25.8386 7.94455 25.691 7.63261 25.4872 7.35798L22.2752 9.74195C22.1657 9.59438 22.0865 9.42693 22.042 9.2493L25.9217 8.27581ZM25.4872 7.35798C25.2833 7.08332 25.0272 6.85132 24.7331 6.67556L22.681 10.1091C22.5226 10.0144 22.3848 9.88954 22.2752 9.74195L25.4872 7.35798ZM24.7331 6.67556C24.439 6.49979 24.1128 6.38379 23.7734 6.33449L23.1985 10.293C23.0153 10.2664 22.8395 10.2038 22.681 10.1091L24.7331 6.67556ZM23.7754 6.33479L16.2108 5.2283L15.6319 9.18618L23.1965 10.2927L23.7754 6.33479ZM17.717 6.3265L14.3331 -0.572515L10.7418 1.18897L14.1257 8.08799L17.717 6.3265ZM14.262 -0.70462C14.0309 -1.0981 13.701 -1.42506 13.3042 -1.65255L11.3146 1.81754C11.1064 1.69816 10.9337 1.52682 10.8129 1.32108L14.262 -0.70462ZM13.3042 -1.65255C12.9074 -1.88007 12.4578 -2 11.9998 -2L11.9998 2C11.7591 2 11.5229 1.93694 11.3146 1.81754L13.3042 -1.65255ZM11.9998 -2C11.5419 -2 11.0923 -1.88007 10.6955 -1.65255L12.6851 1.81754C12.4768 1.93694 12.2406 2 11.9998 2L11.9998 -2ZM10.6955 -1.65255C10.2987 -1.42506 9.96878 -1.0981 9.73769 -0.70462L13.1868 1.32108C13.066 1.52682 12.8933 1.69816 12.6851 1.81754L10.6955 -1.65255ZM9.66663 -0.572515L6.28271 6.3265L9.87398 8.08799L13.2579 1.18897L9.66663 -0.572515ZM7.78857 5.22835L0.223964 6.33604L0.803508 10.2938L8.36812 9.18614L7.78857 5.22835ZM0.225283 6.33585C-0.255591 6.40594 -0.706643 6.60939 -1.07716 6.92241L1.50425 9.97796C1.30483 10.1464 1.06172 10.2562 0.802189 10.294L0.225283 6.33585ZM-1.07716 6.92241C-1.44761 7.23538 -1.72273 7.6453 -1.87236 8.10545L1.93156 9.34246C1.8513 9.58925 1.70361 9.80953 1.50425 9.97796L-1.07716 6.92241ZM-1.87236 8.10545C-2.02198 8.56553 -2.04044 9.05821 -1.92574 9.52813L1.96018 8.57966C2.02168 8.83161 2.01179 9.09572 1.93156 9.34246L-1.87236 8.10545ZM-1.92574 9.52813C-1.81103 9.99809 -1.56751 10.4274 -1.22176 10.7672L1.58205 7.91435C1.76802 8.09712 1.89868 8.32768 1.96018 8.57966L-1.92574 9.52813ZM-1.22024 10.7687L4.25522 16.1386L7.05599 13.2828L1.58053 7.91285L-1.22024 10.7687ZM3.68402 14.3748L2.39165 21.9601L6.33483 22.6319L7.62719 15.0466L3.68402 14.3748ZM2.39197 21.9582C2.31013 22.4358 2.36315 22.9269 2.54528 23.3762L6.25227 21.8734C6.34998 22.1145 6.37838 22.3778 6.3345 22.6338L2.39197 21.9582ZM2.54528 23.3762C2.72743 23.8255 3.03173 24.2157 3.42461 24.5018L5.77956 21.2685C5.99111 21.4226 6.15455 21.6324 6.25227 21.8734L2.54528 23.3762ZM3.42461 24.5018C3.81755 24.788 4.28318 24.9586 4.76884 24.9934L5.05477 21.0036C5.31692 21.0224 5.56797 21.1144 5.77956 21.2685L3.42461 24.5018ZM4.76884 24.9934C5.25453 25.0282 5.73989 24.9258 6.1698 24.6983L4.29903 21.1627C4.53074 21.0401 4.79258 20.9848 5.05477 21.0036L4.76884 24.9934ZM6.16975 24.6983L12.9352 21.1188L11.0645 17.5831L4.29908 21.1627L6.16975 24.6983ZM11.0645 21.1188L17.8299 24.6983L19.7006 21.1627L12.9352 17.5831L11.0645 21.1188ZM17.8418 24.7045C18.343 24.9654 18.9156 25.0565 19.4735 24.9634L18.8154 21.0179C19.1142 20.9681 19.4207 21.0169 19.6888 21.1565L17.8418 24.7045ZM19.4778 24.9627C20.1596 24.8475 20.766 24.4655 21.1648 23.9034L17.9024 21.589C18.1166 21.2869 18.4431 21.0809 18.8111 21.0187L19.4778 24.9627ZM21.1648 23.9034C21.5634 23.3415 21.7227 22.6449 21.6089 21.9665L17.664 22.6279C17.603 22.2643 17.6883 21.8907 17.9024 21.589L21.1648 23.9034ZM21.608 21.9613L20.3157 14.376L16.3725 15.0478L17.6649 22.6331L21.608 21.9613ZM19.7446 16.1396L25.2201 10.7685L22.419 7.91301L16.9435 13.2841L19.7446 16.1396ZM25.2209 10.7677C25.6271 10.3688 25.8908 9.84806 25.9726 9.28596L22.0144 8.70927C22.0583 8.40799 22.1997 8.12839 22.4182 7.91382L25.2209 10.7677ZM15.8767 12.646C15.5773 12.9408 15.3539 13.3034 15.2252 13.7025L19.0322 14.93C18.9633 15.1438 18.8436 15.3383 18.6827 15.4967L15.8767 12.646ZM15.2252 13.7025C15.0965 14.1016 15.0661 14.5259 15.1365 14.9392L19.0797 14.2679C19.1174 14.4891 19.1011 14.7163 19.0322 14.93L15.2252 13.7025ZM15.1365 14.9394L16.2765 21.6313L20.2197 20.9596L19.0797 14.2677L15.1365 14.9394ZM19.1835 19.5277L13.2148 16.3695L11.3441 19.9051L17.3127 23.0632L19.1835 19.5277ZM13.2028 16.3632C12.8315 16.1699 12.4189 16.0689 11.9998 16.0689V20.0689C11.7754 20.0689 11.5546 20.0147 11.356 19.9114L13.2028 16.3632ZM11.9998 16.0689C11.5808 16.0689 11.1682 16.1699 10.7969 16.3632L12.6436 19.9114C12.4451 20.0147 12.2242 20.0689 11.9998 20.0689V16.0689ZM10.7849 16.3695L4.81623 19.5277L6.68698 23.0632L12.6556 19.9051L10.7849 16.3695ZM7.7232 21.6313L8.86317 14.9394L4.91998 14.2677L3.78001 20.9596L7.7232 21.6313ZM8.86321 14.9392C8.93357 14.5259 8.90316 14.1016 8.77446 13.7025L4.96747 14.93C4.89854 14.7163 4.88227 14.4891 4.91994 14.2679L8.86321 14.9392ZM8.77446 13.7025C8.64576 13.3033 8.42243 12.9408 8.12297 12.646L5.31699 15.4967C5.15613 15.3384 5.03641 15.1438 4.96747 14.93L8.77446 13.7025ZM8.12035 12.6434L3.28687 7.9032L0.486131 10.7591L5.31961 15.4993L8.12035 12.6434ZM2.17552 11.3101L8.85335 10.3349L8.27531 6.37687L1.59748 7.35212L2.17552 11.3101ZM8.86013 10.3339C9.27792 10.2714 9.67383 10.1081 10.0139 9.85855L7.64734 6.63372C7.83021 6.49953 8.04336 6.41154 8.26853 6.37787L8.86013 10.3339ZM10.0139 9.85855C10.3539 9.60903 10.6278 9.28086 10.8125 8.90273L7.21853 7.14681C7.31755 6.94413 7.46451 6.7679 7.64734 6.63372L10.0139 9.85855ZM10.8113 8.90528L13.7956 2.81898L10.2041 1.05795L7.21978 7.14425L10.8113 8.90528ZM10.2042 2.81912L13.1885 8.90422L16.7798 7.14291L13.7955 1.05781L10.2042 2.81912ZM13.1884 8.90394C13.3737 9.28195 13.6481 9.60982 13.9887 9.85884L16.3497 6.62991C16.533 6.764 16.6805 6.94031 16.78 7.14319L13.1884 8.90394ZM13.9887 9.85884C14.3293 10.1079 14.7257 10.2705 15.1438 10.3321L15.727 6.37484C15.9526 6.40809 16.1662 6.4958 16.3497 6.62991L13.9887 9.85884ZM15.146 10.3324L21.8238 11.3089L22.4026 7.35097L15.7247 6.37451L15.146 10.3324ZM20.7126 7.90218L15.8792 12.6436L18.6803 15.4991L23.5137 10.7577L20.7126 7.90218Z" fill="white" mask="url(#path-1-inside-1_4576_677)" />
              </svg>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className={css.section}>
      <div className={css.content}>
        {renderUserCards()}
        <ModalRulesEdit
          isOpen={(currentItemRules && currentItemRules != null)}
          onClose={(val) => {
            setCurrentItem(null);
            setCurrentItemRules(null);
          }}
          item={currentItemRules}
          isLiveEdit={true}
          width={554}
          height={783}
        />

        <EditSellerModal
          isOpen={(currentItem && currentItem != null)}
          onClose={(val) => {
            setCurrentItem(null);
            setCurrentItemRules(null);
          }}
          user={currentItem}
        />
      </div>
    </div>
  );
};

export default SellersList;
